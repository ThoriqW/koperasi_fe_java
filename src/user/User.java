/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package user;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.WarnaTable;
import fungsi.koneksi;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.util.prefs.Preferences;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import org.springframework.http.HttpStatus;
import org.springframework.web.client.HttpClientErrorException;

/**
 *
 * @author Lenovo
 */
public class User extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private UpdateUser updateuser = new UpdateUser(null, false);
    /**
     * Creates new form Anggota
     * @param parent
     * @param modal
     */
    public User(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setLocation(8,1);
        setSize(885,674);
        
        Object[] row={"ID","Username","Role","Nama Lengkap","NIK","Email","No.HP","Alamat","Tanggal Lahir","J.K","Agama"};
        tabMode=new DefaultTableModel(null,row){
              @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
        };
        tbUnitKerja.setModel(tabMode);
        //tbPenyakit.setDefaultRenderer(Object.class, new WarnaTable(panelJudul.getBackground(),tbPenyakit.getBackground()));
        tbUnitKerja.setPreferredScrollableViewportSize(new Dimension(800,800));
        tbUnitKerja.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < 11; i++) {
            TableColumn column = tbUnitKerja.getColumnModel().getColumn(i);
            switch (i) {
                case 0 -> {
                    column.setMinWidth(0);
                    column.setMaxWidth(0);
                    column.setWidth(0);
                    column.setPreferredWidth(0);
                }
                case 1 -> column.setPreferredWidth(110);
                case 2 -> column.setPreferredWidth(80);
                case 3 -> column.setPreferredWidth(150);
                case 4 -> column.setPreferredWidth(110);
                case 5 -> column.setPreferredWidth(150);
                case 6 -> column.setPreferredWidth(110);
                case 7 -> column.setPreferredWidth(150);
                case 8 -> column.setPreferredWidth(130);
                case 9 -> column.setPreferredWidth(80);
                case 10 -> column.setPreferredWidth(80);
                case 11 -> column.setPreferredWidth(80);
            }
        }
        
        ChkInput.setSelected(false);
        tbUnitKerja.setDefaultRenderer(Object.class, new WarnaTable());
        isForm(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jUpdateUser = new javax.swing.JMenuItem();
        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbUnitKerja = new widget.Table();
        jPanel3 = new javax.swing.JPanel();
        panelGlass8 = new widget.panelisi();
        BtnSimpan = new widget.Button();
        BtnBatal = new widget.Button();
        BtnHapus = new widget.Button();
        BtnPrint = new widget.Button();
        BtnAll = new widget.Button();
        jLabel10 = new widget.Label();
        LCount = new widget.Label();
        BtnKeluar = new widget.Button();
        panelGlass9 = new widget.panelisi();
        jLabel6 = new widget.Label();
        TCari = new javax.swing.JTextField();
        BtnCari = new widget.Button();
        PanelInput = new javax.swing.JPanel();
        FormInput = new widget.PanelBiasa();
        TUsername = new javax.swing.JTextField();
        jUsername = new javax.swing.JLabel();
        jPassword = new javax.swing.JLabel();
        TPassword = new javax.swing.JTextField();
        ChkInput = new widget.CekBox();

        jUpdateUser.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jUpdateUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/menu-item.png"))); // NOI18N
        jUpdateUser.setText("Update User");
        jUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateUserActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jUpdateUser);
        jUpdateUser.getAccessibleContext().setAccessibleName("Update User");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(611, 155));
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Data User ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setOpaque(true);

        tbUnitKerja.setAutoCreateRowSorter(true);
        tbUnitKerja.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbUnitKerja.setComponentPopupMenu(jPopupMenu1);
        tbUnitKerja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbUnitKerjaMouseClicked(evt);
            }
        });
        tbUnitKerja.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbUnitKerjaKeyReleased(evt);
            }
        });
        Scroll.setViewportView(tbUnitKerja);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(44, 100));
        jPanel3.setLayout(new java.awt.BorderLayout(1, 1));

        panelGlass8.setPreferredSize(new java.awt.Dimension(44, 44));
        panelGlass8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setText("Simpan");
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        BtnSimpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnSimpanKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnSimpan);

        BtnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Cancel-2-16x16.png"))); // NOI18N
        BtnBatal.setMnemonic('B');
        BtnBatal.setText("Baru");
        BtnBatal.setToolTipText("Alt+B");
        BtnBatal.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBatalActionPerformed(evt);
            }
        });
        BtnBatal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnBatalKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnBatal);

        BtnHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/stop_f2.png"))); // NOI18N
        BtnHapus.setMnemonic('H');
        BtnHapus.setText("Hapus");
        BtnHapus.setToolTipText("Alt+H");
        BtnHapus.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHapusActionPerformed(evt);
            }
        });
        BtnHapus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnHapusKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnHapus);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnPrint);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setText("Semua");
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnAll);

        jLabel10.setText("Record :");
        jLabel10.setPreferredSize(new java.awt.Dimension(70, 30));
        panelGlass8.add(jLabel10);

        LCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LCount.setText("0");
        LCount.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        LCount.setPreferredSize(new java.awt.Dimension(72, 30));
        panelGlass8.add(LCount);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnKeluar);

        jPanel3.add(panelGlass8, java.awt.BorderLayout.CENTER);

        panelGlass9.setPreferredSize(new java.awt.Dimension(44, 44));
        panelGlass9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 10));

        jLabel6.setText("Key Word :");
        jLabel6.setPreferredSize(new java.awt.Dimension(70, 23));
        panelGlass9.add(jLabel6);

        TCari.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TCari.setPreferredSize(new java.awt.Dimension(240, 23));
        panelGlass9.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('2');
        BtnCari.setToolTipText("Alt+2");
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass9.add(BtnCari);

        jPanel3.add(panelGlass9, java.awt.BorderLayout.PAGE_START);

        internalFrame1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        PanelInput.setOpaque(false);
        PanelInput.setPreferredSize(new java.awt.Dimension(850, 120));
        PanelInput.setLayout(new java.awt.BorderLayout(1, 1));

        FormInput.setPreferredSize(new java.awt.Dimension(850, 137));
        FormInput.setLayout(null);
        FormInput.add(TUsername);
        TUsername.setBounds(70, 20, 260, 23);

        jUsername.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jUsername.setText("Username :");
        FormInput.add(jUsername);
        jUsername.setBounds(10, 20, 60, 23);

        jPassword.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jPassword.setText("Password :");
        FormInput.add(jPassword);
        jPassword.setBounds(10, 50, 60, 23);
        FormInput.add(TPassword);
        TPassword.setBounds(70, 50, 260, 23);

        PanelInput.add(FormInput, java.awt.BorderLayout.CENTER);

        ChkInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setMnemonic('I');
        ChkInput.setText(".: Input Data");
        ChkInput.setToolTipText("Alt+I");
        ChkInput.setBorderPainted(true);
        ChkInput.setBorderPaintedFlat(true);
        ChkInput.setFocusable(false);
        ChkInput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkInput.setPreferredSize(new java.awt.Dimension(192, 20));
        ChkInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkInputActionPerformed(evt);
            }
        });
        PanelInput.add(ChkInput, java.awt.BorderLayout.PAGE_END);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbUnitKerjaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbUnitKerjaMouseClicked
        if(tabMode.getRowCount()!=0){
            try {
               getData();
            } catch (java.lang.NullPointerException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_tbUnitKerjaMouseClicked

    private void tbUnitKerjaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbUnitKerjaKeyReleased
        if(tabMode.getRowCount()!=0){
            if((evt.getKeyCode()==KeyEvent.VK_ENTER)||(evt.getKeyCode()==KeyEvent.VK_UP)||(evt.getKeyCode()==KeyEvent.VK_DOWN)){
                try {
                    getData();
                } catch (java.lang.NullPointerException e) {
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_tbUnitKerjaKeyReleased

    private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String URL = koneksi.HOST() + "/api/v1/users/register";
            System.out.println("Request ke: " + URL);

            // Ambil token dari Preferences
            Preferences prefs = Preferences.userRoot().node("myApp");
            String token = prefs.get("auth_token", null);

            if (token == null) {
                JOptionPane.showMessageDialog(null, "Token tidak ditemukan! Harap login terlebih dahulu.");
                return;
            }

            // Header
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Accept", "application/json");
            headers.set("Authorization", "Bearer " + token);

            // Data Anggota
            Map<String, Object> requestData = new HashMap<>();
            requestData.put("username", TUsername.getText());
            requestData.put("password", TPassword.getText());
            
            // Konversi Map ke JSON String menggunakan ObjectMapper
            ObjectMapper objectMapper = new ObjectMapper();
            String requestJsonAnggota = objectMapper.writeValueAsString(requestData);

            // Request menggunakan RestTemplate
            RestTemplate restAnggota = new RestTemplate();
            HttpEntity<String> entity = new HttpEntity<>(requestJsonAnggota, headers);
            ResponseEntity<String> response = restAnggota.exchange(URL, HttpMethod.POST, entity, String.class);

            // Menangani response
            if (response.getStatusCode() == HttpStatus.CREATED) {
                JsonNode root = objectMapper.readTree(response.getBody());
                JOptionPane.showMessageDialog(null, root.path("message").asText());
                tabMode.setRowCount(0);
                emptTeks();
                tampil("");
            } else {
                JOptionPane.showMessageDialog(null, "Gagal simpan, periksa kembali data");
            }
        } catch (HttpClientErrorException e) {
            // Menangani error dari API (misalnya 400 Bad Request)
            System.out.println("Error Response: " + e.getResponseBodyAsString());
            JOptionPane.showMessageDialog(null, e.getResponseBodyAsString());
        } catch (JsonProcessingException | HeadlessException | RestClientException e) {
            System.out.println("Terjadi kesalahan: " + e.getMessage());
        }
        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_BtnSimpanActionPerformed

    private void BtnSimpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnSimpanKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnSimpanActionPerformed(null);
        }else{
            //            Valid.pindah(evt,KdJbtn,BtnBatal);
        }
    }//GEN-LAST:event_BtnSimpanKeyPressed

    private void BtnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBatalActionPerformed
        ChkInput.setSelected(true);
        isForm();
        emptTeks();
    }//GEN-LAST:event_BtnBatalActionPerformed

    private void BtnBatalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnBatalKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            emptTeks();
        }
    }//GEN-LAST:event_BtnBatalKeyPressed

    private void BtnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHapusActionPerformed
         this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if(tbUnitKerja.getSelectedRow() != -1){
            String idUser = tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),0).toString();
            try {
                String URL = koneksi.HOST() + "/api/v1/users/" + idUser;
                System.out.println("Request ke: " + URL);

                // Ambil token dari Preferences
                Preferences prefs = Preferences.userRoot().node("myApp");
                String token = prefs.get("auth_token", null);

                if (token == null) {
                    System.out.println("Token tidak ditemukan! Harap login terlebih dahulu.");
                    return;
                }

                // Header
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                headers.set("Accept", "application/json");
                headers.set("Authorization", "Bearer " + token);

                // Request menggunakan RestTemplate
                RestTemplate restTemplate = new RestTemplate();
                HttpEntity<String> entity = new HttpEntity<>(headers);
                ResponseEntity<String> response = restTemplate.exchange(URL, HttpMethod.DELETE, entity, String.class);

                ObjectMapper objectMapper = new ObjectMapper();

                if (response.getStatusCode() == HttpStatus.OK) {
                    JsonNode root = objectMapper.readTree(response.getBody());
                    JOptionPane.showMessageDialog(null, root.path("message").asText());
                    tabMode.setRowCount(0);
                    tampil("");
                } else {
                    JOptionPane.showMessageDialog(null, "Gagal hapus data");
                }

            } catch (JsonProcessingException | RestClientException e) {
                System.out.println(e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Silahkan pilih data terlebih dahulu");
        }
        setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_BtnHapusActionPerformed

    private void BtnHapusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnHapusKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnHapusActionPerformed(null);
        }
    }//GEN-LAST:event_BtnHapusKeyPressed

    private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed

    }//GEN-LAST:event_BtnPrintActionPerformed

    private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnPrintActionPerformed(null);
        }
    }//GEN-LAST:event_BtnPrintKeyPressed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        TCari.setText("");
        tampil("");
    }//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnAllActionPerformed(null);
        }
    }//GEN-LAST:event_BtnAllKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            dispose();
        }
    }//GEN-LAST:event_BtnKeluarKeyPressed

    private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
        if(!TCari.getText().trim().equals("")){
            tampil(TCari.getText().trim());
        } else {
            tampil("");
        }
    }//GEN-LAST:event_BtnCariActionPerformed

    private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnCariActionPerformed(null);
        }
    }//GEN-LAST:event_BtnCariKeyPressed

    private void ChkInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkInputActionPerformed
        isForm();
    }//GEN-LAST:event_ChkInputActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        tampil("");
    }//GEN-LAST:event_formWindowOpened

    private void jUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateUserActionPerformed
        // TODO add your handling code here:
        updateuser.emptTeks();
        updateuser.setSize(internalFrame1.getWidth()-20,internalFrame1.getHeight()-20);
        updateuser.setLocationRelativeTo(internalFrame1);
        updateuser.setAlwaysOnTop(false);
        updateuser.setVisible(true);
        updateuser.setUpdateData(tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),0).toString(),tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),1).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),3).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),4).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),5).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),6).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),7).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),8).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),9).toString(), tbUnitKerja.getValueAt(tbUnitKerja.getSelectedRow(),9).toString());
    }//GEN-LAST:event_jUpdateUserActionPerformed

    public void emptTeks() {
        TUsername.setText("");
        TPassword.setText("");
    }
    
    private void isForm(){
        if(ChkInput.isSelected()==true){
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH,120));
            FormInput.setVisible(true);      
            ChkInput.setVisible(true);
        }else if(ChkInput.isSelected()==false){           
            ChkInput.setVisible(false);            
            PanelInput.setPreferredSize(new Dimension(WIDTH,20));
            FormInput.setVisible(false);      
            ChkInput.setVisible(true);
        }
    }

    private void getData() {
        int row=tbUnitKerja.getSelectedRow();
        if(row!= -1){
            TUsername.setText(tbUnitKerja.getValueAt(row,1).toString());
        }
    }
     
    private void tampil(String cari) {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            String URL = koneksi.HOST() + "/api/v1/users?search=" + cari;
            System.out.println("Request ke: " + URL);
            
            // Ambil token dari Preferences
            Preferences prefs = Preferences.userRoot().node("myApp");
            String token = prefs.get("auth_token", null);

            if (token == null) {
                System.out.println("Token tidak ditemukan! Harap login terlebih dahulu.");
                return;
            }
            
            tabMode.setRowCount(0); // Hapus data lama

            // Header
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Accept", "application/json");
            headers.set("Authorization", "Bearer " + token); 
            
            // Request menggunakan RestTemplate
            RestTemplate restTemplate = new RestTemplate();
            HttpEntity<String> entity = new HttpEntity<>(headers);
            ResponseEntity<String> response = restTemplate.exchange(URL, HttpMethod.GET, entity, String.class);
            
            // Parsing JSON ke dalam tabel
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(response.getBody());

            System.out.println(rootNode);
            
            JsonNode dataArray = rootNode.path("data");

            if (dataArray.isArray()) {
                for (JsonNode member : dataArray) {
                    String id = member.path("id").asText();
                    String nama = member.path("username").asText();
                    String role = member.path("role").asText();
                    String namalengkap = member.path("nama_lengkap").asText();
                    String nik = member.path("nik").asText();
                    String email = member.path("email").asText();
                    String phone = member.path("phone").asText();
                    String alamat = member.path("alamat").asText();
                    String tanggallahir = member.path("tanggal_lahir").asText();
                    String jeniskelamin = member.path("jenis_kelamin").asText();
                    String agama = member.path("agama").asText();

                    // Tambahkan data ke tabel
                    tabMode.addRow(new Object[]{id ,
                        nama.equals("null") ? "" : nama,
                        role.equals("null") ? "" : role,
                        namalengkap.equals("null") ? "" : namalengkap,
                        nik.equals("null") ? "" : nik,
                        email.equals("null") ? "" : email,
                        phone.equals("null") ? "" : phone,
                        alamat.equals("null") ? "" : alamat, 
                        tanggallahir.equals("null") ? "" : tanggallahir,
                        jeniskelamin.equals("null") ? "" : jeniskelamin,
                        agama.equals("null") ? "" : agama
                    });
                }
            }

        } catch (JsonProcessingException | RestClientException e) {
            System.out.println(e);
        } finally{
        }
        LCount.setText(""+tabMode.getRowCount());
        setCursor(Cursor.getDefaultCursor());
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnBatal;
    private widget.Button BtnCari;
    private widget.Button BtnHapus;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.Button BtnSimpan;
    private widget.CekBox ChkInput;
    private widget.PanelBiasa FormInput;
    private widget.Label LCount;
    private javax.swing.JPanel PanelInput;
    private widget.ScrollPane Scroll;
    private javax.swing.JTextField TCari;
    private javax.swing.JTextField TPassword;
    private javax.swing.JTextField TUsername;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel10;
    private widget.Label jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jPassword;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JMenuItem jUpdateUser;
    private javax.swing.JLabel jUsername;
    private widget.panelisi panelGlass8;
    private widget.panelisi panelGlass9;
    private widget.Table tbUnitKerja;
    // End of variables declaration//GEN-END:variables
}
